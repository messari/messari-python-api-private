"""This module is meant to contain the DeFiLlama class"""

# Global imports
import datetime
from string import Template
from typing import Union, List, Dict

import pandas as pd

from messari.dataloader import DataLoader

# Local imports
from messari.utils import validate_input, get_taxonomy_dict, time_filter_df
#from .helpers import format_df

##########################
# URL Endpoints
##########################
BASE_URL = 'https://api.coingecko.com/api/v3'


class CoinGecko(DataLoader):
    """This class is a wrapper around the CoinGecko API
    """

    def __init__(self):
        # TODO add support for api key
        #messari_to_dl_dict = get_taxonomy_dict("messari_to_cg.json")
        DataLoader.__init__(self, api_dict=None, taxonomy_dict=None)

    ## Coins
    def get_coin_list() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_markets() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_tickers() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_history() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_chart() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_range() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_coin_ohlc() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Contract
    def get_contract() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_contract_market() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_contract_range() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Asset Platforms
    def get_asset_platforms() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Categories
    def get_categories_list() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_categories() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Exchanges
    def get_exchanges() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_exchanges_list() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_exchange() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_exchange_tickers() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_exchange_volume() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## indexes
    def get_index() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_indexes() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_indexes_list() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## derivatives
    def get_derivatives() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_derivatives_exchange() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_derivatives_exchanges() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_derivatives_exchanges_list() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Exchange rates
    def get_exchange_rates() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Global
    def get_global() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return
    def get_global_defi() -> pd.DataFrame:
        url = f'{BASE_URL}/'
        return

    ## Companies (beta)
    def get_companies(coin_id: str='bitcoin') -> pd.DataFrame:
        """
        Get public companies bitcoin or ethereum holdings (Ordered by total holdings descending)
        @param coin_id: ('bitcoin' or 'ethereum')
        @return: DataFrame 
        """

        url = f'{BASE_URL}/companies/public_treasury/{coin_id}'
        response = self.get_response(url)
        return pd.DataFrame(response['companies'])
